{"version":3,"sources":["AuthController.js"],"names":["_Admin","_interopRequireDefault","require","_bcryptjs","_jsonwebtoken","register","req","res","_req$body","email","password","hashedPassword","newAdmin","regeneratorRuntime","async","_context","prev","next","body","awrap","Admin","findOne","sent","abrupt","status","json","Message","bcryptjs","hashSync","save","message","t0","error","stop","login","_req$body2","userExist","token","_context2","compareSync","jwt","sign","user","id","_id","process","env","JWT_KEY","expiresIn","Error"],"mappings":"0GAAA,IAAAA,OAAAC,uBAAAC,QAAA,uBACAC,UAAAF,uBAAAC,QAAA,aACAE,cAAAH,uBAAAC,QAAA,yFAEO,IAAMG,SAAW,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAT,EACMF,EAAIY,KAAxBT,EADcD,EACdC,MAAOC,EADOF,EACPE,SADOK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MAJxBC,OAAAA,QAAAC,QAAA,CAAAZ,MAAAA,KAIwB,KAAA,EAAA,GAAAM,EAAAO,KAAA,OAAAP,EAAAQ,OAAA,SAHxBhB,EAAAiB,OAAA,KAAAC,KAAA,CAAAC,QAAA,yBAGwBX,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAFxBN,EAAAgB,UAAAA,QAAAC,SAAAlB,EAAA,IAUUE,EAAW,IAAIQ,OAAAA,QAAM,CACzBX,MAAAA,EACAC,SAAUC,IAVQI,EAAAE,KAAA,GAAAJ,mBAAAM,MAAAP,EAAAiB,QAAA,KAAA,GAapBtB,EAAIiB,OAAO,KAAKC,KAAK,CAAEK,QAAS,4BAbZf,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,GAAAR,EAAAiB,OAAA,KAAAC,KAAA,CAAAK,QAAA,wBAAAE,MAAAjB,EAAAgB,GAAAD,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAkB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,iCAAA,IAAAC,MAAA,SAAA5B,EAAAC,GAAA,IAAA4B,EAAA1B,EAAAC,EAAA0B,EAAAC,EAAA,OAAAxB,mBAAAC,MAAA,SAAAwB,GAAA,OAAA,OAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,KAAA,EAAA,OAAAkB,EAAA7B,EAAAY,KAAAT,EAAA0B,EAAA1B,MAAAC,EAAAyB,EAAAzB,SAAA4B,EAAAtB,KAAA,EAAAsB,EAAArB,KAAA,EAAAJ,mBAAAM,MAAAC,OAAAA,QAAAC,QAAA,CAAAZ,MAAAA,KAAA,KAAA,EAAA,GAGkB2B,EAHlBE,EAAAhB,KAAA,CAAAgB,EAAArB,KAAA,EAAA,MAAA,OAAAqB,EAAAf,OAAA,SAAAhB,EAAAiB,OAAA,KAAAC,KAAA,CAAAK,QAAA,oBAAA,KAAA,EAAA,GA2BEH,UAAAA,QAASY,YAAY7B,EAAU0B,EAAU1B,UA3B3C,CAAA4B,EAAArB,KAAA,GAAA,MAAA,OAAAqB,EAAAf,OAAA,SAAAhB,EAAAiB,OAAA,KAAAC,KAAA,CAAAK,QAAA,wBAAA,KAAA,GAgCVO,EAAQG,cAAAA,QAAIC,KAAK,CAACC,KAAKN,EAAU3B,MAAOkC,GAAGP,EAAUQ,KAAMC,QAAQC,IAAIC,QAAS,CAACC,UAAU,OAhCjFzC,EAKYmB,OAAAA,KAAvBD,KALW,CAAAK,QAAA,YAAAO,MAAAA,IAAA,KAAA,GAAAC,EAAArB,KAAA,GAAA,MAAA,KAAA,GAAAqB,EAAAtB,KAAA,GAAAsB,EAAAP,GAAAO,EAAA,MAAA,GAOd3B,EACAC,OAAAA,KACJH,KAAAA,CAAAA,QAAAA,wBADyBwC,MAAAX,EAAAP,GAAAD,UARP,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"AuthController.min.js","sourcesContent":["import Admin from \"../models/Admin.js\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport const register = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const userExist = await Admin.findOne({ email });\r\n    if (userExist) {\r\n      return res.status(404).json({ Message: \"User already exists\" });\r\n    }\r\n    const hashedPassword = bcryptjs.hashSync(password, 10);\r\n    const newAdmin = new Admin({\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n    await newAdmin.save();\r\n    res.status(201).json({ message: \"Registered successfully\" });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Intrenal server error\", error: error.message });\r\n  }\r\n};\r\nexport const login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const userExist = await Admin.findOne({ email });\r\n    if (!userExist) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n    const validPassword = bcryptjs.compareSync(password, userExist.password);\r\n    if (!validPassword) {\r\n      return res.status(400).json({ message: \"Incorrect password\" });\r\n    }\r\n    else{\r\n        const token = jwt.sign({user:userExist.email, id:userExist._id}, process.env.JWT_KEY, {expiresIn:'1d'})\r\n        res\r\n          .status(200)\r\n          .json({ message: \"Logged in\" , token:token});\r\n    }\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ Message: \"Internal server error\", Error: error.message });\r\n  }\r\n};\r\n"]}